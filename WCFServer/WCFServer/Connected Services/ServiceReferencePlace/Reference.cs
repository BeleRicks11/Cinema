//------------------------------------------------------------------------------
// <auto-generated>
//     Il codice è stato generato da uno strumento.
//     Versione runtime:4.0.30319.42000
//
//     Le modifiche apportate a questo file possono provocare un comportamento non corretto e andranno perse se
//     il codice viene rigenerato.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WCFServer.ServiceReferencePlace {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Place", Namespace="http://schemas.datacontract.org/2004/07/WCFDatabaseManager")]
    [System.SerializableAttribute()]
    public partial class Place : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int HallCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PlaceNumberField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int HallCode {
            get {
                return this.HallCodeField;
            }
            set {
                if ((this.HallCodeField.Equals(value) != true)) {
                    this.HallCodeField = value;
                    this.RaisePropertyChanged("HallCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PlaceNumber {
            get {
                return this.PlaceNumberField;
            }
            set {
                if ((this.PlaceNumberField.Equals(value) != true)) {
                    this.PlaceNumberField = value;
                    this.RaisePropertyChanged("PlaceNumber");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReferencePlace.IServicePlace")]
    public interface IServicePlace {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicePlace/CheckIntFK", ReplyAction="http://tempuri.org/IServicePlace/CheckIntFKResponse")]
        bool CheckIntFK(string value, string valueType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicePlace/CheckIntFK", ReplyAction="http://tempuri.org/IServicePlace/CheckIntFKResponse")]
        System.Threading.Tasks.Task<bool> CheckIntFKAsync(string value, string valueType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicePlace/GetAvailablePlacesList", ReplyAction="http://tempuri.org/IServicePlace/GetAvailablePlacesListResponse")]
        WCFServer.ServiceReferencePlace.Place[] GetAvailablePlacesList(int eventCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicePlace/GetAvailablePlacesList", ReplyAction="http://tempuri.org/IServicePlace/GetAvailablePlacesListResponse")]
        System.Threading.Tasks.Task<WCFServer.ServiceReferencePlace.Place[]> GetAvailablePlacesListAsync(int eventCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicePlace/CheckPlace", ReplyAction="http://tempuri.org/IServicePlace/CheckPlaceResponse")]
        bool CheckPlace(int eventCode, int placeNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicePlace/CheckPlace", ReplyAction="http://tempuri.org/IServicePlace/CheckPlaceResponse")]
        System.Threading.Tasks.Task<bool> CheckPlaceAsync(int eventCode, int placeNumber);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServicePlaceChannel : WCFServer.ServiceReferencePlace.IServicePlace, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServicePlaceClient : System.ServiceModel.ClientBase<WCFServer.ServiceReferencePlace.IServicePlace>, WCFServer.ServiceReferencePlace.IServicePlace {
        
        public ServicePlaceClient() {
        }
        
        public ServicePlaceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServicePlaceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServicePlaceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServicePlaceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool CheckIntFK(string value, string valueType) {
            return base.Channel.CheckIntFK(value, valueType);
        }
        
        public System.Threading.Tasks.Task<bool> CheckIntFKAsync(string value, string valueType) {
            return base.Channel.CheckIntFKAsync(value, valueType);
        }
        
        public WCFServer.ServiceReferencePlace.Place[] GetAvailablePlacesList(int eventCode) {
            return base.Channel.GetAvailablePlacesList(eventCode);
        }
        
        public System.Threading.Tasks.Task<WCFServer.ServiceReferencePlace.Place[]> GetAvailablePlacesListAsync(int eventCode) {
            return base.Channel.GetAvailablePlacesListAsync(eventCode);
        }
        
        public bool CheckPlace(int eventCode, int placeNumber) {
            return base.Channel.CheckPlace(eventCode, placeNumber);
        }
        
        public System.Threading.Tasks.Task<bool> CheckPlaceAsync(int eventCode, int placeNumber) {
            return base.Channel.CheckPlaceAsync(eventCode, placeNumber);
        }
    }
}
